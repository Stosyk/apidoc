{
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "host": "stosyk-sandbox.herokuapp.com",
  "basePath": "/admin/v1",
  "x-servers": [
    {
      "url": "//api.stosyk.io/admin/v1",
      "description": "Default server"
    },
    {
      "url": "//stosyk-sandbox.herokuapp.com/admin/v1",
      "description": "Sandbox server"
    }
  ],
  "info": {
    "description": "Stosyk is a translation management platform for software projects.\nThe API allows you to work with localization data stored in Stosyk for your account.\n\n# Introduction\nThis specification describes the API in \n[OpenAPI/Swagger format](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md).\nIt also uses [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo) tool and \n[ReDoc](https://github.com/Rebilly/ReDoc) documentation engine.\n\n# OpenAPI Specification\nThe goal of The OpenAPI Specification is to define a standard, language-agnostic interface to REST APIs which\nallows both humans and computers to discover and understand the capabilities of the service without access to source\ncode, documentation, or through network traffic inspection. When properly defined via OpenAPI, a consumer can \nunderstand and interact with the remote service with a minimal amount of implementation logic. Similar to what\ninterfaces have done for lower-level programming, OpenAPI removes the guesswork in calling the service.\n\n# Schema\nThe API is only accessible via HTTPS, the base URL is https://api.stosyk.io/, and the current version is v1 which presents in the base URL for all requests: https://api.stosyk.io/v1/.\n\n# Authentication\nWhen you sign up for an account, you will be able to create your first API key.\nYou can generate as many API keys as you want, manage permissions and delete them. \nYou authenticate to the API by providing your secret key in the request header.\n\nStosyk API offers Bearer authentication.\nIt requires sending an `Authorization` header containing the type value `Bearer` followed by your authentication token.\nYou can control the specific granular permissions and expiration for certain token over the [Manage website](https://stosyk.io).\n`TODO:` add an example of usage\n",
    "version": "1.0.0",
    "title": "admin.stosyk.io",
    "contact": {
      "name": "Maksym Koshtenko",
      "email": "maksum.k@gmail.com"
    },
    "x-logo": {
      "url": "logo.png"
    }
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Admins"
    },
    {
      "name": "Users"
    },
    {
      "name": "Teams"
    }
  ],
  "securityDefinitions": {
    "bearer_auth": {
      "description": "This scheme relies on authenticating users by having them present a standard `Authorization` header containing the value `Bearer` followed by their API key / authorization token.\n",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "paths": {
    "/admins": {
      "post": {
        "tags": [
          "Admins"
        ],
        "summary": "Create",
        "description": "Create new admin user\n",
        "operationId": "createNewAdmin",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "parameters": [
          {
            "name": "admin",
            "in": "body",
            "description": "The admin JSON you want to create",
            "schema": {
              "$ref": "#/definitions/Admin"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdminContainer"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Admins"
        ],
        "summary": "Get all",
        "description": "Returns all admin users\n",
        "operationId": "getAllAdmins",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdminsContainer"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/admins/{id}": {
      "get": {
        "tags": [
          "Admins"
        ],
        "summary": "Get by Id",
        "description": "Returns certain admin user by unique identifier\n",
        "operationId": "getAdminById",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "Id of the admin",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdminContainer"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Admins"
        ],
        "summary": "Update",
        "description": "Update an existen admin user\n",
        "operationId": "updateAdmin",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "Id of the admin",
            "required": true
          },
          {
            "name": "admin",
            "in": "body",
            "description": "The admin JSON you want to update",
            "schema": {
              "$ref": "#/definitions/Admin"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AdminContainer"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Admins"
        ],
        "summary": "Delete",
        "description": "Delete an existen admin\n",
        "operationId": "deleteAdmin",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "Id of the admin",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/teams": {
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": "Create",
        "description": "Create new team\n",
        "operationId": "createNewTeam",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "parameters": [
          {
            "name": "team",
            "in": "body",
            "description": "The team JSON you want to create",
            "schema": {
              "$ref": "#/definitions/Team"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TeamContainer"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get all",
        "description": "Returns all teams\n",
        "operationId": "getAllTeams",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TeamsContainer"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/teams/{id}": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get by Id",
        "description": "Returns certain team by unique identifier\n",
        "operationId": "getTeamById",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "Id of the team",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TeamContainer"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Teams"
        ],
        "summary": "Update",
        "description": "Update an existen team\n",
        "operationId": "updateTeam",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "Id of the team",
            "required": true
          },
          {
            "name": "team",
            "in": "body",
            "description": "The team JSON you want to update",
            "schema": {
              "$ref": "#/definitions/Team"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TeamContainer"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Teams"
        ],
        "summary": "Delete",
        "description": "Delete an existen team\n",
        "operationId": "deleteTeam",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "Id of the team",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create",
        "description": "Create new user\n",
        "operationId": "createNewUser",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "The user JSON you want to create",
            "schema": {
              "$ref": "#/definitions/User"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserContainer"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all",
        "description": "Returns all users\n",
        "operationId": "getAllUsers",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UsersContainer"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get by Id",
        "description": "Returns certain user by unique identifier\n",
        "operationId": "getUserById",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "Id of the user",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserContainer"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update",
        "description": "Update an existen user\n",
        "operationId": "updateUser",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "Id of the user",
            "required": true
          },
          {
            "name": "user",
            "in": "body",
            "description": "The user JSON you want to update",
            "schema": {
              "$ref": "#/definitions/User"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/UserContainer"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete",
        "description": "Delete an existen user\n",
        "operationId": "deleteUser",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "Id of the user",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Admin": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier",
          "type": "integer",
          "example": 10001
        },
        "name": {
          "description": "Name of the admin user",
          "type": "string",
          "example": "Bob the admin"
        },
        "email": {
          "description": "Admin's email address",
          "type": "string",
          "example": "a@stosyk.io"
        }
      }
    },
    "AdminContainer": {
      "type": "object",
      "properties": {
        "admins": {
          "description": "List with one admin",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Admin"
          }
        }
      }
    },
    "AdminsContainer": {
      "type": "object",
      "properties": {
        "_meta": {
          "$ref": "#/definitions/Meta"
        },
        "admins": {
          "description": "List of admins",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Admin"
          }
        }
      }
    },
    "Meta": {
      "type": "object",
      "properties": {
        "limit": {
          "description": "Number of entities per page",
          "type": "integer",
          "example": 10
        },
        "offset": {
          "description": "Index of first entity",
          "type": "integer",
          "example": 0
        },
        "total": {
          "description": "Total number of entities",
          "type": "integer",
          "example": 1
        }
      }
    },
    "Team": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier",
          "type": "integer",
          "example": 10001
        },
        "name": {
          "description": "Name of the team",
          "type": "string",
          "example": "FirstTeam"
        },
        "description": {
          "description": "Description for the team",
          "type": "string",
          "example": "We do amazing things"
        }
      }
    },
    "TeamContainer": {
      "type": "object",
      "properties": {
        "teams": {
          "description": "List with one team",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Team"
          }
        }
      }
    },
    "TeamsContainer": {
      "type": "object",
      "properties": {
        "_meta": {
          "$ref": "#/definitions/Meta"
        },
        "teams": {
          "description": "List of teams",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Team"
          }
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier",
          "type": "integer",
          "example": 10001
        },
        "name": {
          "description": "Name of the user",
          "type": "string",
          "example": "Tom Mot"
        },
        "email": {
          "description": "User's email address",
          "type": "string",
          "example": "a@mail.net"
        }
      }
    },
    "UserContainer": {
      "type": "object",
      "properties": {
        "use": {
          "description": "List with one user",
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      }
    },
    "UsersContainer": {
      "type": "object",
      "properties": {
        "_meta": {
          "$ref": "#/definitions/Meta"
        },
        "users": {
          "description": "List of users",
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      }
    }
  }
}
